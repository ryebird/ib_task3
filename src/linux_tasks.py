#!/usr/bin/env python3

import os
import subprocess
import sys
from pathlib import Path
import time
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.prompt import Prompt, Confirm
from rich.table import Table
from rich import print as rprint

class LinuxTrainer:
    def __init__(self):
        self.console = Console()
        self.completed_tasks = []
        self.current_task = 0
        self.total_tasks = 6
        
        self.setup_test_environment()
    
    def setup_test_environment(self):
        home = Path.home()
        practice_dir = home / "linux_practice"
        
        try:
            (practice_dir / "documents").mkdir(parents=True, exist_ok=True)
            (practice_dir / "downloads").mkdir(parents=True, exist_ok=True)
            (practice_dir / "temp").mkdir(parents=True, exist_ok=True)
            
            test_files = {
                "documents/readme.txt": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è Linux –∫–æ–º–∞–Ω–¥.\n–í –Ω–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞.\n–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ '–≤–∞–∂–Ω—ã–π'.\n–ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–±—ã—á–Ω–∞—è.",
                "documents/data.log": "2024-08-31 10:00:01 INFO –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞\n2024-08-31 10:00:02 ERROR –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n2024-08-31 10:00:03 INFO –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n2024-08-31 10:00:04 SUCCESS –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                "downloads/archive.txt": "–°—Ç–∞—Ä—ã–π –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª\n–°–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2020-01-01",
                "temp/temporary.tmp": "–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"
            }
            
            for file_path, content in test_files.items():
                full_path = practice_dir / file_path
                full_path.parent.mkdir(parents=True, exist_ok=True)
                full_path.write_text(content)
                
        except Exception as e:
            self.console.print(f"[red]–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã: {e}[/red]")
    
    def clear_screen(self):
        os.system('clear' if os.name == 'posix' else 'cls')
    
    def show_header(self):
        self.console.print(Panel.fit(
            "[bold cyan]üêß Linux Commands Training üêß[/bold cyan]\n"
            f"[green]–ü—Ä–æ–≥—Ä–µ—Å—Å: {len(self.completed_tasks)}/{self.total_tasks} –∑–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ[/green]",
            title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
            border_style="cyan"
        ))
    
    def run_command(self, command, capture_output=True):
        try:
            if capture_output:
                result = subprocess.run(command, shell=True, capture_output=True, text=True, cwd=Path.home())
                return result.returncode == 0, result.stdout.strip(), result.stderr.strip()
            else:
                result = subprocess.run(command, shell=True, cwd=Path.home())
                return result.returncode == 0, "", ""
        except Exception as e:
            return False, "", str(e)
    
    def task_navigation(self):
        self.console.print(Panel(
            "[bold yellow]–ó–∞–¥–∞–Ω–∏–µ 1: –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ[/bold yellow]\n\n"
            "–ò–∑—É—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:\n"
            "‚Ä¢ [cyan]pwd[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
            "‚Ä¢ [cyan]ls[/cyan] - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫\n"
            "‚Ä¢ [cyan]cd[/cyan] - –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
            "‚Ä¢ [cyan]ls -la[/cyan] - –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞",
            title="üìÅ –ù–∞–≤–∏–≥–∞—Ü–∏—è"
        ))
        
        tasks = [
            ("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: pwd", "pwd", lambda out: len(out) > 0),
            ("–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ls", "ls", lambda out: "linux_practice" in out),
            ("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–ø–∫—É linux_practice: cd linux_practice", "cd linux_practice && pwd", lambda out: "linux_practice" in out),
            ("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –ø—Ä–∞–≤–∞–º–∏: ls -la", "ls -la", lambda out: "documents" in out and "downloads" in out)
        ]
        
        return self.execute_task_sequence(tasks)
    
    def task_files(self):
        self.console.print(Panel(
            "[bold yellow]–ó–∞–¥–∞–Ω–∏–µ 2: –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏[/bold yellow]\n\n"
            "–ò–∑—É—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏:\n"
            "‚Ä¢ [cyan]touch[/cyan] - —Å–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª\n"
            "‚Ä¢ [cyan]mkdir[/cyan] - —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é\n"
            "‚Ä¢ [cyan]cp[/cyan] - –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª\n"
            "‚Ä¢ [cyan]mv[/cyan] - –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª",
            title="üìÑ –§–∞–π–ª—ã"
        ))
        
        tasks = [
            ("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª test.txt: touch test.txt", "touch test.txt && ls", lambda out: "test.txt" in out),
            ("–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É new_folder: mkdir new_folder", "mkdir new_folder && ls", lambda out: "new_folder" in out),
            ("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ test.txt –≤ new_folder: cp test.txt new_folder/", "cp test.txt new_folder/ && ls new_folder/", lambda out: "test.txt" in out),
            ("–ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ test.txt –≤ renamed.txt: mv test.txt renamed.txt", "mv test.txt renamed.txt && ls", lambda out: "renamed.txt" in out and "test.txt" not in out)
        ]
        
        return self.execute_task_sequence(tasks)
    
    def task_content(self):
        self.console.print(Panel(
            "[bold yellow]–ó–∞–¥–∞–Ω–∏–µ 3: –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤[/bold yellow]\n\n"
            "–ò–∑—É—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:\n"
            "‚Ä¢ [cyan]cat[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª\n"
            "‚Ä¢ [cyan]head[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞\n"
            "‚Ä¢ [cyan]tail[/cyan] - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞\n"
            "‚Ä¢ [cyan]wc[/cyan] - –ø–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫, —Å–ª–æ–≤, —Å–∏–º–≤–æ–ª–æ–≤",
            title="üëÅÔ∏è –°–æ–¥–µ—Ä–∂–∏–º–æ–µ"
        ))
        
        tasks = [
            ("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: cat documents/readme.txt", "cat documents/readme.txt", lambda out: "—Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª" in out),
            ("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–≤—ã–µ 2 —Å—Ç—Ä–æ–∫–∏: head -n 2 documents/readme.txt", "head -n 2 documents/readme.txt", lambda out: out.count('\n') <= 2),
            ("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å—Ç—Ä–æ–∫–∏: tail -n 2 documents/readme.txt", "tail -n 2 documents/readme.txt", lambda out: "–≤–∞–∂–Ω—ã–π" in out or "–æ–±—ã—á–Ω–∞—è" in out),
            ("–ü–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–∞–π–ª–µ: wc -l documents/readme.txt", "wc -l documents/readme.txt", lambda out: "4" in out)
        ]
        
        return self.execute_task_sequence(tasks)
    
    def task_search(self):
        self.console.print(Panel(
            "[bold yellow]–ó–∞–¥–∞–Ω–∏–µ 4: –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è[/bold yellow]\n\n"
            "–ò–∑—É—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞:\n"
            "‚Ä¢ [cyan]find[/cyan] - –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n"
            "‚Ä¢ [cyan]grep[/cyan] - –ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–∞–π–ª–∞—Ö\n"
            "‚Ä¢ [cyan]locate[/cyan] - –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤\n"
            "‚Ä¢ [cyan]which[/cyan] - –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
            title="üîç –ü–æ–∏—Å–∫"
        ))
        
        tasks = [
            ("–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ .txt —Ñ–∞–π–ª—ã: find . -name '*.txt'", "find . -name '*.txt'", lambda out: "readme.txt" in out),
            ("–ù–∞–π–¥–∏—Ç–µ —Å–ª–æ–≤–æ '–≤–∞–∂–Ω—ã–π' –≤ —Ñ–∞–π–ª–∞—Ö: grep '–≤–∞–∂–Ω—ã–π' documents/readme.txt", "grep '–≤–∞–∂–Ω—ã–π' documents/readme.txt", lambda out: "–≤–∞–∂–Ω—ã–π" in out),
            ("–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã —Å ERROR –≤ –ª–æ–≥–∞—Ö: grep 'ERROR' documents/data.log", "grep 'ERROR' documents/data.log", lambda out: "ERROR" in out),
            ("–ù–∞–π–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É python3: which python3", "which python3", lambda out: "python3" in out)
        ]
        
        return self.execute_task_sequence(tasks)
    
    def task_permissions(self):
        self.console.print(Panel(
            "[bold yellow]–ó–∞–¥–∞–Ω–∏–µ 5: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º[/bold yellow]\n\n"
            "–ò–∑—É—á–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –ø—Ä–∞–≤–∞–º–∏:\n"
            "‚Ä¢ [cyan]chmod[/cyan] - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n"
            "‚Ä¢ [cyan]ls -l[/cyan] - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞\n"
            "‚Ä¢ [cyan]chown[/cyan] - –∏–∑–º–µ–Ω–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∞)",
            title="üîê –ü—Ä–∞–≤–∞"
        ))
        
        tasks = [
            ("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞ —Ñ–∞–π–ª–∞: ls -l documents/readme.txt", "ls -l documents/readme.txt", lambda out: "readme.txt" in out and ("-" in out or "r" in out)),
            ("–°–¥–µ–ª–∞–π—Ç–µ —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º: chmod +x documents/readme.txt", "chmod +x documents/readme.txt && ls -l documents/readme.txt", lambda out: "x" in out),
            ("–£–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: chmod -w documents/readme.txt", "chmod -w documents/readme.txt && ls -l documents/readme.txt", lambda out: "readme.txt" in out),
            ("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∞: chmod 644 documents/readme.txt", "chmod 644 documents/readme.txt && ls -l documents/readme.txt", lambda out: "readme.txt" in out)
        ]
        
        return self.execute_task_sequence(tasks)
    
    def task_processes(self):
        self.console.print(Panel(
            "[bold yellow]–ó–∞–¥–∞–Ω–∏–µ 6: –ü—Ä–æ—Ü–µ—Å—Å—ã –∏ —Å–∏—Å—Ç–µ–º–∞[/bold yellow]\n\n"
            "–ò–∑—É—á–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å–∏—Å—Ç–µ–º—ã:\n"
            "‚Ä¢ [cyan]ps[/cyan] - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
            "‚Ä¢ [cyan]top[/cyan] - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
            "‚Ä¢ [cyan]df[/cyan] - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤\n"
            "‚Ä¢ [cyan]free[/cyan] - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏",
            title="‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞"
        ))
        
        tasks = [
            ("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: ps aux | head -5", "ps aux | head -5", lambda out: "PID" in out or "python" in out),
            ("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: df -h", "df -h", lambda out: "Filesystem" in out and "%" in out),
            ("–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: free -h", "free -h", lambda out: "Mem:" in out or "total" in out),
            ("–ù–∞–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã python: ps aux | grep python", "ps aux | grep python", lambda out: "python" in out)
        ]
        
        return self.execute_task_sequence(tasks)
    
    def execute_task_sequence(self, tasks):
        for i, (description, expected_command, validator) in enumerate(tasks, 1):
            self.console.print(f"\n[bold]–®–∞–≥ {i}:[/bold] {description}")
            
            while True:
                command = Prompt.ask("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É")
                
                if command.strip().lower() in ['quit', 'exit', 'q']:
                    return False
                    
                success, output, error = self.run_command(command)
                
                if success and validator(output):
                    self.console.print("[green]‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ![/green]")
                    if output:
                        self.console.print(f"[dim]–†–µ–∑—É–ª—å—Ç–∞—Ç: {output[:200]}{'...' if len(output) > 200 else ''}[/dim]")
                    break
                else:
                    self.console.print("[red]‚úó –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.[/red]")
                    if error:
                        self.console.print(f"[red]–û—à–∏–±–∫–∞: {error}[/red]")
                    self.console.print(f"[yellow]–ü–æ–¥—Å–∫–∞–∑–∫–∞: {description}[/yellow]")
        
        return True
    
    def show_final_flag(self):
        flag = "flag{test_default_flag}"
        
        self.console.print("\n" + "="*50)
        self.console.print(Panel.fit(
            f"[bold green]üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! üéâ[/bold green]\n\n"
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ Linux –∫–æ–º–∞–Ω–¥–∞–º!\n\n"
            f"[bold red]–í–ê–® –§–õ–ê–ì: {flag}[/bold red]\n\n"
            f"[dim]–¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –æ—Å–Ω–æ–≤—ã —Ä–∞–±–æ—Ç—ã —Å Linux —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º![/dim]",
            title="–£–°–ü–ï–•!",
            border_style="green"
        ))
        self.console.print("="*50)
    
    def main_menu(self):
        tasks = [
            ("–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ", self.task_navigation),
            ("–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏", self.task_files),
            ("–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤", self.task_content),
            ("–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", self.task_search),
            ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º", self.task_permissions),
            ("–ü—Ä–æ—Ü–µ—Å—Å—ã –∏ —Å–∏—Å—Ç–µ–º–∞", self.task_processes)
        ]
        
        while len(self.completed_tasks) < self.total_tasks:
            self.clear_screen()
            self.show_header()
            
            table = Table(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
            table.add_column("‚Ññ", style="cyan", width=3)
            table.add_column("–ù–∞–∑–≤–∞–Ω–∏–µ", style="white")
            table.add_column("–°—Ç–∞—Ç—É—Å", style="green")
            
            for i, (task_name, _) in enumerate(tasks, 1):
                status = "‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ" if i in self.completed_tasks else "‚óã –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                style = "green" if i in self.completed_tasks else "white"
                table.add_row(str(i), task_name, status, style=style)
            
            self.console.print(table)
            
            next_task = None
            for i, (task_name, task_func) in enumerate(tasks, 1):
                if i not in self.completed_tasks:
                    next_task = (i, task_name, task_func)
                    break
            
            if next_task:
                task_num, task_name, task_func = next_task
                
                if Confirm.ask(f"\n–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ {task_num}: {task_name}?"):
                    self.console.print(f"\n[bold cyan]–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ {task_num}...[/bold cyan]")
                    
                    if task_func():
                        self.completed_tasks.append(task_num)
                        self.console.print(f"\n[bold green]‚úì –ó–∞–¥–∞–Ω–∏–µ {task_num} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ![/bold green]")
                    else:
                        self.console.print(f"\n[yellow]–ó–∞–¥–∞–Ω–∏–µ {task_num} –ø—Ä–µ—Ä–≤–∞–Ω–æ.[/yellow]")
                        if not Confirm.ask("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ?"):
                            break
        
        if len(self.completed_tasks) == self.total_tasks:
            self.clear_screen()
            self.show_final_flag()
    
    def run(self):
        try:
            self.clear_screen()
            self.console.print(Panel.fit(
                "[bold cyan]üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Linux Training! üöÄ[/bold cyan]\n\n"
                "–≠—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –∏–∑—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã Linux.\n"
                "–í—ã –±—É–¥–µ—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.\n\n"
                "[yellow]–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ª—é–±–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞–±–µ—Ä–∏—Ç–µ: quit, exit –∏–ª–∏ q[/yellow]",
                title="–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è",
                border_style="cyan"
            ))
            
            if Confirm.ask("\n–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ?"):
                self.main_menu()
            else:
                self.console.print("[yellow]–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã![/yellow]")
                
        except KeyboardInterrupt:
            self.console.print("\n[yellow]–û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è![/yellow]")
        except Exception as e:
            self.console.print(f"[red]–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}[/red]")

if __name__ == "__main__":
    trainer = LinuxTrainer()
    trainer.run()
